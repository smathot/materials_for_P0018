# Generated by OpenSesame 2.9.0 (Hesitant Heisenberg)
# Mon Oct 27 16:33:54 2014 (nt)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "psycho"
set subject_parity "even"
set height "768"
set font_italic "no"
set synth_backend "legacy"
set title "Intrasaccadic pupil"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "A template containing a practice and an experimental phase"
set psychopy_monitor "gammaCorrected"
set background "gray"
set subject_nr "0"
set round_decimals "5"
set font_size "18"
set keyboard_backend "psycho"
set canvas_backend "psycho"
set compensation "0"
set bidi "no"
set font_family "mono"
set width "1024"

define feedback block_feedback
	set duration "keypress"
	draw textline 0 0 "End of block<br /><br />Press any key to continue" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script check_refresh_rate
	___run__
	N = 200
	a = np.empty(N)
	for i in range(N):
		bgStimHoriz.draw()	
		win.flip()
		a[i] = self.time()
		bgStimHoriz.phase += .5
	d = a[2:]-a[1:-1]
	frameDurMean = d.mean()
	frameDurSD = d.std()
	exp.set('frameDurMean', frameDurMean)
	exp.set('refreshEst', 1000./frameDurMean)
	exp.set('frameDurSD', frameDurSD)
	__end__
	set _prepare ""

define sequence check_refresh_sequence
	run check_refresh_rate "always"
	run refresh_rate "always"

define inline_script constants
	set _run ""
	___prepare__
	size = 768
	e = .75*.5*size
	dotColor = 'green'
	
	# Set experimental variables
	exp.set('size', size)
	exp.set('e', e)
	exp.set('dotColor', dotColor)
	
	# The spatial frequencies of the background stimuli are saved in `sf.yaml`.
	# This file is created by the peakVel experiment.
	if os.path.exists('sf.yaml'):
		d = yaml.load(open('sf.yaml').read())
	else:
		d = {
			'left' : .005,
			'right' : .005,
			'top' : .005,
			'bottom' : .005
		}
	for startPos, sf in d.items():
		exp.set('sf_%s' % startPos, sf)
	__end__

define inline_script determine_velocity_calibration_results
	___run__
	d = {}
	for startPos in peakVelDict:
		d[str(startPos)] = float(.5/np.median(peakVelDict[startPos]))
		exp.set('peakVel%s' % startPos,
			np.median(peakVelDict[startPos]))
		exp.set('sf%s' % startPos,
			.5/np.median(peakVelDict[startPos]))
	open('sf.yaml', 'w').write(yaml.dump(d))
	__end__
	set _prepare ""

define sequence experiment
	set flush_keyboard "yes"
	set description "The main sequence of the experiment"
	run form_base "always"
	run pygaze_init "[checkDisplay] != yes"
	run imports "always"
	run constants "always"
	run functions "always"
	run stimuli "always"
	run check_refresh_sequence "[checkDisplay] = yes"
	run velocity_calibration_sequence "[peakVel] = yes"
	run experimental_loop "[runExp] = yes"

define loop experimental_loop
	set repeat "4"
	set item "experimental_sequence"
	set break_if "never"
	set column_order ""
	set cycles "1"
	set order "random"
	run experimental_sequence

define sequence experimental_sequence
	run show_sf "always"
	run trial_block_loop "always"
	run block_feedback "always"

define inline_script flicker_trial
	___run__
	stimList, bgStim = getStimList(self.get('startPos'))
	exp.pygaze_eyetracker.log('phase baseline')
	flickerSleep(1000, bgStim, stimList=stimList)
	cue.play()
	exp.pygaze_eyetracker.log('phase cue')
	flickerSleep(3000, bgStim, stimList=stimList)
	win.flip()
	exp.pygaze_eyetracker.log('phase end')
	__end__
	set _prepare ""

define form_base form_base
	set rows "1;1;1;1;1"
	set cols "1"
	widget 0 0 1 1 label text="Experiment menu"
	widget 0 1 1 1 button var="runExp" text="Run experiment"
	widget 0 2 1 1 button var="checkDisplay" text="Check display refresh and gamma"
	widget 0 3 1 1 button var="peakVel" text="Determine peak velocity"
	widget 0 4 1 1 checkbox var="plotVelocity" text="Show velocity profiles"


define inline_script functions
	set _run ""
	___prepare__
	def dot(pos, color='green', size=10):
		
		"""
		desc:
			Creates a dot stimulus.
			
		arguments:
			pos:	An (xy) position tuple.
			
		keywords:
			color:	The dot color.
			size:	The dot size.
			
		returns:
			type:	GratingStim
		"""
		
		return GratingStim(win, size=size, mask='circle', color=color, pos=pos,
			tex=None)
			
	def flickerSleep(dur, bgStim, stimList=[], minX=None, maxX=None, minY=None,
		maxY=None):
			
		"""
		desc:
			Pauses while the phase of background flips with every frame.
			
		arguments:
			dur:		The duration to sleep.
			bgStim:		The background stimulus.
			
		keywords:
			stimList:	A list of other stimuli to draw.
			minX:		Minimum horizontal gaze position. The loop will break
						when gaze falls outside of this boundary.
			maxX:		See minX
			minY:		See minX
			maxY:		see minX
		"""
		
		t0 = self.time()
		lT = []	
		while self.time() - t0 <= dur:
			x,y = exp.pygaze_eyetracker.sample()
			if minX != None and minX < x:
				break
			if maxX != None and maxX > x:
				break
			if minY != None and minY < y:
				break
			if maxY != None and maxY > y:
				break
			bgStim.draw()
			bgStim.phase += .5
			for stim in stimList:
				stim.draw()
			win.flip()
			lT.append(self.time())		
		aT = np.array(lT)
		aDT = aT[1:] - aT[:-1]
		print 'framedur = %.2f' % aDT.mean()
	
	def getStimList(startPos):
		
		"""
		desc:
			Gets the stimulus list associated with a starting position.
			
		arguments:
			startPos:	'left', 'right', 'top', or 'bottom'
			
		returns:
			A (stimList, bgStim) tuple.
		"""
	
		if self.get('startPos') in ['left', 'right']:
			stimList = [dotL, dotR]
		elif self.get('startPos') in ['top', 'bottom']:
			stimList = [dotB, dotT]
		if not self.has('driftDir'):
			bgStim = None
		elif self.get('driftDir') == 'horiz':
			bgStim = bgStimHoriz
		elif self.get('driftDir') == 'vert':
			bgStim = bgStimVert
		if bgStim != None:
			bgStim.sf = self.get('sf_%s' % self.get('startPos'))
		return stimList, bgStim
	__end__

define inline_script imports
	set _run ""
	___prepare__
	from openexp.synth import synth
	from psychopy.visual import GratingStim
	from psychopy import event
	import numpy as np
	import os
	import yaml
	__end__

define inline_script init_trial
	set _run ""
	___prepare__
	if self.get('startPos') == 'left':
		startX = -e
		startY = 0
		endX = e
		endY = 0
	elif self.get('startPos') == 'right':
		startX = e
		startY = 0
		endX = -e
		endY = 0
	elif self.get('startPos') == 'top':
		startX = 0
		startY = e
		endX = 0
		endY = -e
	elif self.get('startPos') == 'bottom':
		startX = 0
		startY = -e
		endX = 0
		endY = e
	else:
		raise Exception('Invalid start position')
	
	exp.set('startX', startX)
	exp.set('startY', startY)
	exp.set('endX', endX)
	exp.set('endY', endY)
	__end__

define logger logger

define pygaze_drift_correct pygaze_drift_correct
	set xpos "[startX]"
	set draw_target "yes"
	set ypos "[startY]"
	set target_style "default"
	set target_color "[foreground]"
	set fixation_triggered "yes"

define pygaze_init pygaze_init
	set sacc_acc_thr "9500"
	set tracker_type "EyeLink"
	set sacc_vel_thr "35"
	set eyelink_calbeep "yes"
	set calibrate "yes"
	set eyelink_pupil_size_mode "area"
	set eyelink_force_drift_correct "yes"
	set _logfile "automatic"

define pygaze_log pygaze_log
	set msg ""
	set throttle "2"
	set auto_log "yes"

define pygaze_start_recording pygaze_start_recording
	set status_msg "start_trial [count_trial_sequence]"

define pygaze_stop_recording pygaze_stop_recording

define feedback refresh_rate
	set duration "keypress"
	draw textline -480 -352 "<b>Frame duration:</b><br /><br />Measured: [frameDurMean] ms (SD = [frameDurSD]; [refreshEst] Hz)<br />Goal: 6.67 ms (150 Hz)<br /><br /><br /><b>Gamma calibration:</b><br /><br />Gamma calibration is ok if the display appeared uniformly gray.<br /><br /><br />Press any key to exit" center=0 color="white" font_family="sans" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad show_sf
	set duration "keypress"
	set round_decimals "5"
	draw textline -416 0 "[sf_left]" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 416 0 "[sf_right]" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -288 "[sf_top]" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 288 "[sf_bottom]" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "Press any key to begin" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define feedback show_velocity_calibration_results
	set duration "keypress"
	set round_decimals "5"
	draw textline 0 0 "Peak velocities:<br /><br />Left:   [peakVelleft] (sf = [sfleft])<br />Right:  [peakVelright] (sf = [sfright])<br />Top:    [peakVeltop] (sf = [sftop])<br />Bottom: [peakVelbottom] (sf = [sfbottom])" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -32 0 "" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script stimuli
	set _run ""
	___prepare__
	bgStimHoriz = GratingStim(win, size=size, sf=.01)
	bgStimVert = GratingStim(win, size=size, sf=.01, ori=90)
	dotT = dot((0,-e))
	dotB = dot((0,e))
	dotL = dot((-e,0))
	dotR = dot((e,0))
	cue = synth(exp)
	__end__

define loop trial_block_loop
	set repeat "5"
	set description "A single block of trials"
	set item "trial_sequence"
	set break_if "never"
	set column_order "startPos;driftDir"
	set cycles "8"
	set order "random"
	setcycle 0 startPos "left"
	setcycle 0 driftDir "horiz"
	setcycle 1 startPos "right"
	setcycle 1 driftDir "horiz"
	setcycle 2 startPos "top"
	setcycle 2 driftDir "horiz"
	setcycle 3 startPos "bottom"
	setcycle 3 driftDir "horiz"
	setcycle 4 startPos "left"
	setcycle 4 driftDir "vert"
	setcycle 5 startPos "right"
	setcycle 5 driftDir "vert"
	setcycle 6 startPos "top"
	setcycle 6 driftDir "vert"
	setcycle 7 startPos "bottom"
	setcycle 7 driftDir "vert"
	run trial_sequence

define sequence trial_sequence
	set flush_keyboard "yes"
	set description "A single trial"
	run init_trial "always"
	run pygaze_drift_correct "always"
	run pygaze_start_recording "always"
	run flicker_trial "always"
	run pygaze_log "always"
	run pygaze_stop_recording "always"

define loop velocity_calibration
	set repeat "10"
	set item "velocity_sequence"
	set break_if "never"
	set column_order "startPos"
	set cycles "4"
	set order "random"
	setcycle 0 startPos "left"
	setcycle 1 startPos "right"
	setcycle 2 startPos "top"
	setcycle 3 startPos "bottom"
	run velocity_sequence

define sequence velocity_calibration_sequence
	run velocity_calibration "always"
	run determine_velocity_calibration_results "always"
	run show_velocity_calibration_results "always"

define feedback velocity_feedback
	set duration "keypress"
	draw image 0 0 "velocity.png" scale=1 center=1 z_index=0 show_if="always"

define pygaze_start_recording velocity_pygaze_start_recording
	set status_msg "start_trial velocity_calibration"

define sequence velocity_sequence
	run init_trial "always"
	run pygaze_drift_correct "always"
	run velocity_pygaze_start_recording "always"
	run velocity_trial "always"
	run pygaze_log "always"
	run pygaze_stop_recording "always"
	run velocity_feedback "[plotVelocity] != no"
	run logger "always"

define inline_script velocity_trial
	___run__
	frameDur = 1000 / 150.
	nFrames = int(3000 / frameDur)
	
	stimList, bgStim = getStimList(self.get('startPos'))
	for stim in stimList:
		stim.draw()
	win.flip()
	self.sleep(1000)
	cue.play()
	
	ay = np.zeros(nFrames)
	ax = np.zeros(nFrames)
	ps = np.zeros(nFrames)
	for i in range(nFrames):
		x, y = exp.pygaze_eyetracker.sample()
		if x < 1 and y < 1:
			ay[i] = np.nan
			ax[i] = np.nan
		else:
			ay[i] = y
			ax[i] = x
		ps[i] = exp.pygaze_eyetracker.pupil_size()
		self.sleep(frameDur)
	adx = ax[1:] - ax[:-1]
	ady = ay[1:] - ay[:-1]
	ps = ps[1:]
	adx[np.where(ps == 0)] = np.nan
	ady[np.where(ps == 0)] = np.nan
	
	peakVel = max(np.nanmax(np.abs(adx)), np.nanmax(np.abs(ady)))
	exp.set('peakVel', peakVel)
	
	if peakVel > 50 and peakVel < 150:
		try:
			peakVelDict
		except:
			peakVelDict = {}
		if self.get('startPos') not in peakVelDict:
			peakVelDict[self.get('startPos')] = []
		peakVelDict[self.get('startPos')].append(peakVel)
	else:
		exp.set('repeat_cycle', 1)
	exp.pygaze_eyetracker.status_msg('peakVel = %s' % peakVel)
	
	if self.get('plotVelocity') != 'no':
		from matplotlib import pyplot as plt
		plt.clf()
		plt.subplot(211)
		plt.ylim(-150, 150)
		plt.title('peakVel = %.2f px/frame' % peakVel)
		plt.plot(adx, color='red', label='X velocity')
		plt.plot(ady, color='blue', label='Y velocity')
		plt.ylabel('Pixels / frame')
		plt.axhline(-peakVel, linestyle='--', color='black')
		plt.axhline(peakVel, linestyle='--', color='black')
		plt.legend(frameon=False)
		plt.subplot(212)
		plt.plot(ps, color='black')
		plt.ylabel('Pupil size')
		plt.savefig('velocity.png')
	__end__
	set _prepare "exp.set('trialId', 'velocity')"


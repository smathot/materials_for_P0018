# Generated by OpenSesame 2.9.0~pre20 (Hesitant Heisenberg)
# Fri Oct 03 16:16:33 2014 (nt)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "psycho"
set subject_parity "even"
set height "768"
set font_italic "no"
set canvas_backend "psycho"
set synth_backend "legacy"
set start "experiment"
set title "Extended template"
set coordinates "relative"
set width "1024"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "A template containing a practice and an experimental phase"
set background "gray"
set font_size "18"
set keyboard_backend "psycho"
set font_family "mono"
set compensation "0"
set bidi "no"
set subject_nr "0"

define feedback block_feedback
	set duration "keypress"
	draw textline 0.0 0.0 "End of block<br /><br />Press any key to continue" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script constants
	___run__
	size = 768
	e = .75*.5*size
	# For a peak velocity of 100 px per frame or
	# about 450 deg/s
	sf = .005
	dotColor = 'green'
	
	# Set experimental variables
	exp.set('size', size)
	exp.set('e', e)
	exp.set('sf', sf)
	exp.set('dotColor', dotColor)
	__end__
	set _prepare ""

define sequence experiment
	set flush_keyboard "yes"
	set description "The main sequence of the experiment"
	run pygaze_init "always"
	run imports "always"
	run constants "always"
	run functions "always"
	run stimuli "always"
	run velocity_calibration "never"
	run experimental_loop "always"

define loop experimental_loop
	set repeat "4"
	set item "experimental_sequence"
	set break_if "never"
	set column_order ""
	set cycles "1"
	set order "random"
	run experimental_sequence

define sequence experimental_sequence
	run trial_block_loop "always"
	run block_feedback "always"

define inline_script flicker_trial
	___run__
	exp.pygaze_eyetracker.log('phase baseline')
	flickerSleep(1000, bgStim, stimList=stimList)
	cue.play()
	exp.pygaze_eyetracker.log('phase cue')
	flickerSleep(3000, bgStim, stimList=stimList)
	win.flip()
	exp.pygaze_eyetracker.log('phase end')
	__end__
	___prepare__
	if self.get('startPos') in ['left', 'right']:
		stimList = [dotL, dotR]
	elif self.get('startPos') in ['top', 'bottom']:
		stimList = [dotB, dotT]
	if self.get('driftDir') == 'horiz':
		bgStim = bgStimHoriz
	elif self.get('driftDir') == 'vert':
		bgStim = bgStimVert
	__end__

define inline_script functions
	___run__
	def dot(pos, color='green', size=10):
		
		return GratingStim(win, size=size, mask='circle', color=color, pos=pos,
			tex=None)
			
	def flickerSleep(dur, bgStim, stimList=[], minX=None, maxX=None, minY=None,
		maxY=None):
		
		t0 = self.time()
		lT = []	
		while self.time() - t0 <= dur:
			x,y = exp.pygaze_eyetracker.sample()
			if minX != None and minX < x:
				break
			if maxX != None and maxX > x:
				break
			if minY != None and minY < y:
				break
			if maxY != None and maxY > y:
				break
			bgStim.draw()
			bgStim.phase += .5
			for stim in stimList:
				stim.draw()
			win.flip()
			lT.append(self.time())		
		aT = np.array(lT)
		aDT = aT[1:] - aT[:-1]
		print 'framedur = %.2f' % aDT.mean()
	__end__
	set _prepare ""

define inline_script imports
	___run__
	from openexp.synth import synth
	from psychopy.visual import GratingStim
	from psychopy import event
	import numpy as np
	__end__
	set _prepare ""

define inline_script init_trial
	set _run ""
	___prepare__
	if self.get('startPos') == 'left':
		startX = -e
		startY = 0
		endX = e
		endY = 0
	elif self.get('startPos') == 'right':
		startX = e
		startY = 0
		endX = -e
		endY = 0
	elif self.get('startPos') == 'top':
		startX = 0
		startY = e
		endX = 0
		endY = -e
	elif self.get('startPos') == 'bottom':
		startX = 0
		startY = -e
		endX = 0
		endY = e
	else:
		raise Exception('Invalid start position')
	
	exp.set('startX', startX)
	exp.set('startY', startY)
	exp.set('endX', endX)
	exp.set('endY', endY)
	__end__

define pygaze_drift_correct pygaze_drift_correct
	set xpos "[startX]"
	set draw_target "yes"
	set ypos "[startY]"
	set target_style "default"
	set target_color "[foreground]"
	set fixation_triggered "yes"

define pygaze_init pygaze_init
	set sacc_acc_thr "9500"
	set tracker_type "EyeLink"
	set sacc_vel_thr "35"
	set eyelink_calbeep "yes"
	set calibrate "yes"
	set eyelink_pupil_size_mode "area"
	set eyelink_force_drift_correct "yes"
	set _logfile "test.edf"

define pygaze_log pygaze_log
	set msg ""
	set throttle "2"
	set auto_log "yes"

define pygaze_start_recording pygaze_start_recording
	set status_msg "start_trial [count_trial_sequence]"

define pygaze_stop_recording pygaze_stop_recording

define inline_script stimuli
	___run__
	bgStimHoriz = GratingStim(win, size=size, sf=sf)
	bgStimVert = GratingStim(win, size=size, sf=sf, ori=90)
	dotT = dot((0,-e))
	dotB = dot((0,e))
	dotL = dot((-e,0))
	dotR = dot((e,0))
	cue = synth(exp)
	__end__
	set _prepare ""

define loop trial_block_loop
	set repeat "5"
	set description "A single block of trials"
	set item "trial_sequence"
	set break_if "never"
	set column_order "startPos;driftDir"
	set cycles "8"
	set order "random"
	setcycle 0 startPos "left"
	setcycle 0 driftDir "horiz"
	setcycle 1 startPos "right"
	setcycle 1 driftDir "horiz"
	setcycle 2 startPos "top"
	setcycle 2 driftDir "horiz"
	setcycle 3 startPos "bottom"
	setcycle 3 driftDir "horiz"
	setcycle 4 startPos "left"
	setcycle 4 driftDir "vert"
	setcycle 5 startPos "right"
	setcycle 5 driftDir "vert"
	setcycle 6 startPos "top"
	setcycle 6 driftDir "vert"
	setcycle 7 startPos "bottom"
	setcycle 7 driftDir "vert"
	run trial_sequence

define sequence trial_sequence
	set flush_keyboard "yes"
	set description "A single trial"
	run init_trial "always"
	run pygaze_drift_correct "always"
	run pygaze_start_recording "always"
	run flicker_trial "always"
	run pygaze_stop_recording "always"
	run pygaze_log "always"

define loop velocity_calibration
	set cycles "1"
	set column_order ""
	run velocity_sequence

define feedback velocity_feedback
	set duration "keypress"
	draw image 0 0 "velocity.png" scale=1 center=1 z_index=0 show_if="always"

define pygaze_start_recording velocity_pygaze_start_recording
	set status_msg "start_trial velocity_calibration"

define sequence velocity_sequence
	run velocity_pygaze_start_recording "always"
	run velocity_trial "always"
	run pygaze_stop_recording "always"
	run velocity_feedback "always"

define inline_script velocity_trial
	___run__
	dotT.draw()
	dotB.draw()
	dotL.draw()
	dotR.draw()
	win.flip()
	
	lt = []
	lx = []
	ly = []
	
	t0 = self.time()
	while 'space' not in event.getKeys():
		while self.time() - t0 < 6.667:
			pass
		t0 = self.time()
		x, y = exp.pygaze_eyetracker.sample()
		lt.append(t0)
		lx.append(x)
		ly.append(y)
		
	at = np.array(lt)
	ax = np.array(lx)
	ay = np.array(ly)
	
	dt = at[1:] - at[:-1]
	dx = ax[1:] - ax[:-1]
	dy = ay[1:] - ay[:-1]
	
	from matplotlib import pyplot as plt
	plt.title('dt = %.4f' % dt.mean())
	plt.plot(dx, color='red')
	plt.plot(dy, color='green')
	plt.savefig('velocity.png')
	__end__
	set _prepare "exp.set('trialId', 'velocity')"

